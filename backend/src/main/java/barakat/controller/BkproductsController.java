package barakat.controller;

import barakat.app.repository.BkproductsTcRepository;
import barakat.tctransport.model.gen.Bkproducts;
import io.swagger.v3.oas.annotations.Parameter;
import lombok.Getter;
import lombok.extern.log4j.Log4j2;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
* Generated by Spring Data Generator on 26/05/2022
*/
@Log4j2
@Getter
@Configuration
@RestController
@CrossOrigin
@RequestMapping("barakat/bkproducts")
public class BkproductsController implements TcTransportCopySchedule {
    @Autowired
    BkproductsTcRepository repository;

    public Integer lastId(){
        List<Bkproducts> data = repository.findAll(PageRequest.of(0, 1, Sort.by("id").descending())).getContent();
        if(data.size() == 0){
            return 0;
        }else{
            return data.get(0).getId();
        }
    }

    @Override
    public Logger getLogger() { return log; }

    @PostMapping(value = "/", produces = "application/json")
    Bkproducts post(@RequestBody Bkproducts bkcustomers) {
        //todo подумать над HAL https://spring.io/guides/tutorials/rest/
        bkcustomers.setId(lastId() + 1);
        bkcustomers.setEnabled((short) 1);
        return repository.save(bkcustomers);
    }

    @GetMapping(value = "/{id}", produces = "application/json")
    Bkproducts findById(@PathVariable Integer id) throws NotFoundException {
        return repository.findById(id).orElseThrow(() -> new NotFoundException(id));
    }

    @GetMapping(value = "/", produces = "application/json")
    List<Bkproducts> findAll(@Parameter Integer page, Integer size) throws NotFoundException {
        return repository.findAll(PageRequest.of(page, size)).getContent();
    }

    @GetMapping(value = "/catalog", produces = "application/json")
    Object[] findAllCatalog(@Parameter String q) throws NotFoundException {
        return repository.findAllByName(q.toLowerCase()).toArray();
    }


    @DeleteMapping(value = "/{id}", produces = "application/json")
    Integer disabledById(@PathVariable Integer id) throws NotFoundException {
        Bkproducts tcData = repository.findById(id).orElseThrow(() -> new NotFoundException(id));
        tcData.setEnabled((short) 0);
        repository.save(tcData);
        return tcData.getId();
    }

}

