package barakat.app.controller;

import barakat.app.controller.modelassembler.*;
import barakat.app.entity.Order;
import barakat.app.repository.BkcustomersAppRepository;
import barakat.app.repository.BkproductsTcRepository;
import barakat.app.repository.OrdersRepository;
import barakat.app.repository.mirrorgen.BkwarehousesTcRepository;
import barakat.app.specification.OrderSpecification;
import barakat.app.specification.SearchCriteria;
import barakat.controller.NotFoundException;
import barakat.tctransport.model.gen.Bkcustomers;
import barakat.tctransport.model.gen.Bkproducts;
import barakat.tctransport.model.gen.Bkwarehouses;
import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.Getter;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.repository.query.Param;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.*;
import org.springframework.hateoas.mediatype.problem.Problem;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.function.Function;

/**
 * Generated by Spring Data Generator on 26/05/2022
 */
@Log4j2
@Getter
@RestController
@RequestMapping("barakat/apporders")
@CrossOrigin
public class OrdersController {
    @Autowired
    OrdersRepository repository;
    @Autowired
    OrderContentModelAssembler assemblerc;
    @Autowired
    BkcustomersAppRepository customersAppRepository;
    @Autowired
    BkwarehousesTcRepository warehousesTcRepository;
    @Autowired
    BkproductsTcRepository productsTcRepository;

//    appOrders.getBkCustomer().getId()

    public Integer lastId(){
        List<Order> data = repository.findAll(PageRequest.of(0, 1, Sort.by("id").descending())).getContent();
        if(data.size() == 0){
            return 0;
        }else{
            return data.get(0).getId();
        }

    }

    @PostMapping(value = "/", produces = "application/json")
    ResponseEntity<?> create(@RequestBody Order appOrders) {
        appOrders.setId(lastId() + 1);
        appOrders.setCreateAt(LocalDateTime.now(ZoneId.of("UTC")));
        appOrders.setStatus(OrdersStatus.created.name());
        appOrders.setBkCustomer(customersAppRepository.getById(appOrders.getBkCustomer().getId()));
        appOrders.setBkProduct(productsTcRepository.getById(appOrders.getBkProduct().getId()));
        appOrders.setBkWarehouse(warehousesTcRepository.getById(appOrders.getBkWarehouse().getId()));

        Order cr = repository.save(appOrders);
        EntityModel<OrderContent> entityModel = assemblerc.toModel(new OrderContent(repository.findById(cr.getId()).get()));

        return ResponseEntity
                .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
                .body(entityModel);
    }

    @GetMapping(value = "/{id}", produces = "application/json")
    public EntityModel<OrderContent> one(@PathVariable Integer id) throws NotFoundException {
        Order appOrders = repository.findById(id).orElseThrow(() -> new NotFoundException(id));
        return assemblerc.toModel(new OrderContent(appOrders));
    }

    @GetMapping(value = "/all", produces = {MediaType.APPLICATION_JSON_VALUE,MediaTypes.HAL_JSON_VALUE})
    public PagedModel<EntityModel<OrderContent>> all(@PageableDefault(page = 0, size = 10, sort = {"id"}, direction = Sort.Direction.DESC) Pageable pageRequest,
                                                     PagedResourcesAssembler<OrderContent> pagedResourcesAssembler,
                                                     @RequestParam(required = false) String name,
                                                     @RequestParam(required = false) String product,
                                                     @RequestParam(required = false) List<String> nonstatuses) throws NotFoundException {

        List<Specification> specs = new ArrayList<>();
        //Specification.where(OrderSpecification.getClientName("болашак")),
        Specification spec = null;
        if(name != null)  specs.add(OrderSpecification.getClientName(name));
        if(product != null)  specs.add(OrderSpecification.getProductName(product));
        if(nonstatuses != null && nonstatuses.size() > 0){
            specs.add(OrderSpecification.ignoreStatuses(nonstatuses));
        };
        if(specs.size() == 1){
            spec = Specification.where(specs.get(0));
        }else if(specs.size() > 1){
            for (Specification spece: specs){
                if(spec == null){
                    spec = Specification.where(spece);
                }else{
                    spec = spec.and(spece);
                }
            }
        }

        Page<OrderContent> page =  repository.findAll(spec, pageRequest).map(o -> new OrderContent((Order) o));
        return pagedResourcesAssembler.toModel(page, assemblerc);
    }

//    //https://wesome.org/spring-data-jpa-specifications
//    @PostMapping(value = "/all", produces = {MediaType.APPLICATION_JSON_VALUE,MediaTypes.HAL_JSON_VALUE})
//    public PagedModel<EntityModel<OrderContent>> allf(@PageableDefault(page = 0, size = 10, sort = {"id"}, direction = Sort.Direction.DESC) Pageable pageRequest,
//                                                      PagedResourcesAssembler<OrderContent> pagedResourcesAssembler,
//                                                      @RequestBody List<SearchCriteria> searchCriteria) throws NotFoundException {
//        OrderSpecification specification = new OrderSpecification();
//        searchCriteria.stream().forEach(specification::add);
//        Page<OrderContent> page = repository.findAll(specification, pageRequest).map(order -> new OrderContent(order));
//        pagedResourcesAssembler.setForceFirstAndLastRels(false);
//        return pagedResourcesAssembler.toModel(page, assemblerc);
//    }


    @DeleteMapping(value = "/{id}/cancel", produces = "application/json")
    public ResponseEntity<?> cancel(@PathVariable Integer id, @RequestParam String reason) {
        Order order = repository.findById(id).orElseThrow(() -> new NotFoundException(id));
        if (OrdersStatus.created.name().equals(order.getStatus())) {
            order.setStatus(OrdersStatus.rejected.name());
            order.setRejectReason(reason);
            repository.save(order);
            return ResponseEntity.ok(assemblerc.toModel(new OrderContent(repository.getById(order.getId()))));
        }

        return ResponseEntity //
                .status(HttpStatus.METHOD_NOT_ALLOWED) //
                .header(HttpHeaders.CONTENT_TYPE, MediaTypes.HTTP_PROBLEM_DETAILS_JSON_VALUE) //
                .body(Problem.create() //
                        .withTitle("Method not allowed") //
                        .withDetail("You can't cancel an order that is in the " + order.getStatus() + " status"));
    }

    @GetMapping(value = "/{id}/edit", produces = "application/json")
    public EntityModel<OrderContent> editcheck(@PathVariable Integer id) {
        Order order = repository.findById(id).orElseThrow(() -> new NotFoundException(id));
        OrderContent orderContent = new OrderContent(order);
        Map<String, Object> map = new HashMap<>();
        map.put("bkProduct", true);
        map.put("bkCustomer", true);
        map.put("bkWarehouse", true);
        map.put("cubicMeter", true);
        map.put("construction", true);
        map.put("coneSediment", true);
        map.put("startTime", true);
        map.put("endTime", true);
        map.put("intervalMinutes", true);
        map.put("intervalComment", true);
        orderContent.set_additional(map);
//        return ResponseEntity.ok(assemblerc.toModel(new OrderContent(repository.getById(order.getId()))));
        return assemblerc.toModel(orderContent);
    }

    @PostMapping(value = "/edit", produces = "application/json")
    public EntityModel<OrderContent> edit(@RequestBody Order editted) {
        Order tochange = repository.findById(editted.getId()).orElseThrow(() -> new NotFoundException(editted.getId()));
        tochange.setBkCustomer(customersAppRepository.getById(editted.getBkCustomer().getId()));
        tochange.setBkProduct(productsTcRepository.getById(editted.getBkProduct().getId()));
        tochange.setBkWarehouse(warehousesTcRepository.getById(editted.getBkWarehouse().getId()));
        tochange.setCubicMeter(editted.getCubicMeter());
        tochange.setConstruction(editted.getConstruction());
        tochange.setConeSediment(editted.getConeSediment());
        tochange.setStartTime(editted.getStartTime());
        tochange.setEndTime(editted.getEndTime());
        tochange.setIntervalMinutes(editted.getIntervalMinutes());
        tochange.setIntervalComment(editted.getIntervalComment());
        Order cr = repository.save(tochange);
        return assemblerc.toModel(new OrderContent(cr));
    }
}
