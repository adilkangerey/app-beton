package barakat.app.controller;

import barakat.app.controller.modelassembler.*;
import barakat.app.entity.Order;
import barakat.app.repository.OrdersRepository;
import barakat.controller.NotFoundException;
import lombok.Getter;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.*;
import org.springframework.hateoas.mediatype.problem.Problem;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;

/**
 * Generated by Spring Data Generator on 26/05/2022
 */
@Log4j2
@Getter
@RestController
@RequestMapping("barakat/apporders")
@CrossOrigin
public class OrdersController {
    @Autowired
    OrdersRepository repository;
    @Autowired
    OrderContentModelAssembler assemblerc;

    public Integer lastId(){
        List<Order> data = repository.findAll(PageRequest.of(0, 1, Sort.by("id").descending())).getContent();
        if(data.size() == 0){
            return 0;
        }else{
            return data.get(0).getId();
        }
    }

    @PostMapping(value = "/", produces = "application/json")
    ResponseEntity<?>  create(@RequestBody Order appOrders) {
        //todo подумать над HAL https://spring.io/guides/tutorials/rest/
        appOrders.setId(lastId() + 1);
        appOrders.setCreateAt(LocalDateTime.now(ZoneId.of("UTC")));
        appOrders.setStatus(OrdersStatus.created.name());
        EntityModel<OrderContent> entityModel = assemblerc.toModel(new OrderContent(repository.save(appOrders)));

        return ResponseEntity
                .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
                .body(entityModel);
    }

    @GetMapping(value = "/{id}", produces = "application/json")
    public EntityModel<OrderContent> one(@PathVariable Integer id) throws NotFoundException {
        Order appOrders = repository.findById(id).orElseThrow(() -> new NotFoundException(id));
        return assemblerc.toModel(new OrderContent(appOrders));
    }

    @GetMapping(value = "/all", produces = {MediaType.APPLICATION_JSON_VALUE,MediaTypes.HAL_JSON_VALUE})
    public PagedModel<EntityModel<OrderContent>> all(@PageableDefault(page = 0, size = 10) Pageable pageRequest,
                                                      PagedResourcesAssembler<OrderContent> pagedResourcesAssembler) throws NotFoundException {
        Page<OrderContent> page = repository.findAll(pageRequest).map(order -> new OrderContent(order));
        pagedResourcesAssembler.setForceFirstAndLastRels(true);
        return pagedResourcesAssembler.toModel(page, assemblerc);
    }

    @DeleteMapping(value = "/{id}/cancel", produces = "application/json")
    public ResponseEntity<?> cancel(@PathVariable Integer id) {
        //todo подумать над HAL https://spring.io/guides/tutorials/rest/
        Order order = repository.findById(id).orElseThrow(() -> new NotFoundException(id));
        if (OrdersStatus.created.name().equals(order.getStatus())) {
            order.setStatus(OrdersStatus.cancel.name());
            return ResponseEntity.ok(assemblerc.toModel(new OrderContent(repository.save(order))));
        }

        return ResponseEntity //
                .status(HttpStatus.METHOD_NOT_ALLOWED) //
                .header(HttpHeaders.CONTENT_TYPE, MediaTypes.HTTP_PROBLEM_DETAILS_JSON_VALUE) //
                .body(Problem.create() //
                        .withTitle("Method not allowed") //
                        .withDetail("You can't cancel an order that is in the " + order.getStatus() + " status"));
    }
}
